"use strict";(self.webpackChunknumberninecms_docs=self.webpackChunknumberninecms_docs||[]).push([[679],{5998:(n,s,a)=>{a.r(s),a.d(s,{data:()=>e});const e={key:"v-0d250e42",path:"/developers/howto/theming/create-a-component.html",title:"Create a component",lang:"en-US",frontmatter:{prev:"/developers/architecture/theming.md",next:"/developers/howto/theming/create-a-shortcode.md"},excerpt:"",headers:[{level:2,title:"Configuration",slug:"configuration",children:[]},{level:2,title:"Using CLI",slug:"using-cli",children:[]},{level:2,title:"File structure",slug:"file-structure",children:[]},{level:2,title:"Render a component from Twig",slug:"render-a-component-from-twig",children:[]},{level:2,title:"Inject variables in a component",slug:"inject-variables-in-a-component",children:[]},{level:2,title:"Expose variables to the component's template",slug:"expose-variables-to-the-component-s-template",children:[]},{level:2,title:"Injecting a service in your component",slug:"injecting-a-service-in-your-component",children:[]}],filePathRelative:"developers/howto/theming/create-a-component.md",git:{updatedTime:1627744977e3}}},693:(n,s,a)=>{a.r(s),a.d(s,{default:()=>i});var e=a(6252);const t=(0,e.Wm)("h1",{id:"create-a-component",tabindex:"-1"},[(0,e.Wm)("a",{class:"header-anchor",href:"#create-a-component","aria-hidden":"true"},"#"),(0,e.Uk)(" Create a component")],-1),p=(0,e.Uk)("To understand what are components, "),o=(0,e.Uk)("read this section"),c=(0,e.Uk)("."),l=(0,e.uE)('<h2 id="configuration" tabindex="-1"><a class="header-anchor" href="#configuration" aria-hidden="true">#</a> Configuration</h2><p>In your <code>config/packages/numbernine.yaml</code> file, configure the path where to store components. By default it&#39;s <code>src/Component/</code>, if this path suits you then skip this step.</p><div class="language-yaml ext-yml line-numbers-mode"><pre class="language-yaml"><code><span class="token key atrule">numbernine</span><span class="token punctuation">:</span>\n    <span class="token key atrule">components_path</span><span class="token punctuation">:</span> <span class="token string">&#39;src/My/Path/To/Components/&#39;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h2 id="using-cli" tabindex="-1"><a class="header-anchor" href="#using-cli" aria-hidden="true">#</a> Using CLI</h2><p>Run this command in your terminal:</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>docker-compose exec php bin/console numbernine:make:component\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>You&#39;ll be asked for a component name, enter the name you want. You can create subfolders, for example <code>Post/PostAuthor</code>.</p><h2 id="file-structure" tabindex="-1"><a class="header-anchor" href="#file-structure" aria-hidden="true">#</a> File structure</h2><p>A new folder is created with two files:</p><ul><li><p><code>MyComponent/MyComponent.php</code></p><p>This is the controller of the component template.</p></li><li><p><code>MyComponent/template.html.php</code></p><p>This is the template.</p></li></ul><h2 id="render-a-component-from-twig" tabindex="-1"><a class="header-anchor" href="#render-a-component-from-twig" aria-hidden="true">#</a> Render a component from Twig</h2><p>To render the component, use this Twig function:</p><div class="language-twig ext-twig line-numbers-mode"><pre class="language-twig"><code><span class="token tag"><span class="token ld"><span class="token punctuation">{{</span></span> <span class="token property">N9_component</span><span class="token punctuation">(</span><span class="token string"><span class="token punctuation">&#39;</span>MyComponent<span class="token punctuation">&#39;</span></span><span class="token punctuation">)</span> <span class="token rd"><span class="token punctuation">}}</span></span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h2 id="inject-variables-in-a-component" tabindex="-1"><a class="header-anchor" href="#inject-variables-in-a-component" aria-hidden="true">#</a> Inject variables in a component</h2><p>You can inject some variables from the parent template into your component:</p><div class="language-twig ext-twig line-numbers-mode"><pre class="language-twig"><code><span class="token tag"><span class="token ld"><span class="token punctuation">{{</span></span> <span class="token property">N9_component</span><span class="token punctuation">(</span><span class="token string"><span class="token punctuation">&#39;</span>MyComponent<span class="token punctuation">&#39;</span></span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token property">example</span><span class="token punctuation">:</span> <span class="token string"><span class="token punctuation">&#39;</span>string variable<span class="token punctuation">&#39;</span></span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token rd"><span class="token punctuation">}}</span></span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>To catch it, your component need to implement the corresponding setter:</p><div class="language-php ext-php line-numbers-mode"><pre class="language-php"><code><span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name-definition class-name">MyComponent</span> <span class="token keyword">implements</span> <span class="token class-name">ComponentInterface</span>\n<span class="token punctuation">{</span>\n    <span class="token keyword">private</span> <span class="token keyword type-declaration">string</span> <span class="token variable">$example</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">setExample</span><span class="token punctuation">(</span><span class="token keyword type-hint">string</span> <span class="token variable">$example</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">void</span>\n    <span class="token punctuation">{</span>\n        <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">example</span> <span class="token operator">=</span> <span class="token variable">$example</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token comment">// ...</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h2 id="expose-variables-to-the-component-s-template" tabindex="-1"><a class="header-anchor" href="#expose-variables-to-the-component-s-template" aria-hidden="true">#</a> Expose variables to the component&#39;s template</h2><p>Every component must implement <code>getTemplateParameters()</code> which returns an array of exposed variables to the template.</p><div class="language-php ext-php line-numbers-mode"><pre class="language-php"><code><span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name-definition class-name">MyComponent</span> <span class="token keyword">implements</span> <span class="token class-name">ComponentInterface</span>\n<span class="token punctuation">{</span>\n    <span class="token comment">// ...</span>\n\n    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">getTemplateParameters</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">array</span>\n    <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token punctuation">[</span>\n            <span class="token string single-quoted-string">&#39;example&#39;</span> <span class="token operator">=&gt;</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">example</span><span class="token punctuation">,</span>\n        <span class="token punctuation">]</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>The Twig template can now use this variable:</p><div class="language-twig ext-twig line-numbers-mode"><pre class="language-twig"><code><span class="token other"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>Displaying custom variable:</span> <span class="token tag"><span class="token ld"><span class="token punctuation">{{</span></span> <span class="token property">example</span> <span class="token rd"><span class="token punctuation">}}</span></span></span><span class="token other">.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h2 id="injecting-a-service-in-your-component" tabindex="-1"><a class="header-anchor" href="#injecting-a-service-in-your-component" aria-hidden="true">#</a> Injecting a service in your component</h2><p>Every component is a service. This means you can use dependency injection like with any other service.</p><div class="language-php ext-php line-numbers-mode"><pre class="language-php"><code><span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name-definition class-name">MyComponent</span> <span class="token keyword">implements</span> <span class="token class-name">ComponentInterface</span>\n<span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span>\n        <span class="token class-name type-declaration">EventDispatcherInterface</span> <span class="token variable">$eventDispatcher</span>\n    <span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">// ...</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div>',26),i={render:function(n,s){const a=(0,e.up)("RouterLink");return(0,e.wg)(),(0,e.j4)(e.HY,null,[t,(0,e.Wm)("p",null,[p,(0,e.Wm)(a,{to:"/developers/architecture/theming.html#components"},{default:(0,e.w5)((()=>[o])),_:1}),c]),l],64)}}}}]);
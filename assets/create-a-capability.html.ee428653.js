import{_ as n,o as s,c as a,e}from"./app.6b5c2181.js";const t={},p=e(`<h1 id="create-a-capability" tabindex="-1"><a class="header-anchor" href="#create-a-capability" aria-hidden="true">#</a> Create a capability</h1><p>Create a class in <code>src/EventSubscriber/CapabilitiesListEventSubscriber.php</code> file.</p><div class="language-php ext-php line-numbers-mode"><pre class="language-php"><code><span class="token keyword">namespace</span> <span class="token package">App<span class="token punctuation">\\</span>EventSubscriber</span><span class="token punctuation">;</span>

<span class="token keyword">use</span> <span class="token package">NumberNine<span class="token punctuation">\\</span>Event<span class="token punctuation">\\</span>CapabilitiesListEvent</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">Symfony<span class="token punctuation">\\</span>Component<span class="token punctuation">\\</span>EventDispatcher<span class="token punctuation">\\</span>EventSubscriberInterface</span><span class="token punctuation">;</span>

<span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name-definition class-name">CapabilitiesListEventSubscriber</span> <span class="token keyword">implements</span> <span class="token class-name">EventSubscriberInterface</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">function</span> <span class="token function-definition function">getSubscribedEvents</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">array</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token punctuation">[</span>
            <span class="token class-name static-context">CapabilitiesListEvent</span><span class="token operator">::</span><span class="token keyword">class</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#39;addCapabilities&#39;</span><span class="token punctuation">,</span>
        <span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">addCapabilities</span><span class="token punctuation">(</span><span class="token class-name type-declaration">CapabilitiesListEvent</span> <span class="token variable">$event</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">void</span>
    <span class="token punctuation">{</span>
        <span class="token variable">$event</span><span class="token operator">-&gt;</span><span class="token function">addCapability</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;my_first_custom_capability&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token variable">$event</span><span class="token operator">-&gt;</span><span class="token function">addCapability</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;another_custom_capability&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Assign it to the roles you want. Then in your controller:</p><div class="language-php ext-php line-numbers-mode"><pre class="language-php"><code><span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">denyAccessUnlessGranted</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;my_first_custom_capability&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,5),i=[p];function c(o,l){return s(),a("div",null,i)}const r=n(t,[["render",c],["__file","create-a-capability.html.vue"]]);export{r as default};

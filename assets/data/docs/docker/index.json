{"hash":"ef076e282fc9282fba2143b067034f37ae54ad0b","data":{"markdownPage":{"id":"eb36ed89481265b836e4ec9c6f43dd0a","title":"Docker services","description":"Docker services","path":"/docs/docker/","timeToRead":2,"content":"<h1 id=\"docker-services\"><a href=\"#docker-services\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Docker services</h1>\n<p>NumberNine's default installation relies on Docker to create a fully operational Docker development environment.</p>\n<p>If you're not already familiar with Docker, see it as a kind of WAMP, XAMPP, MAMP, Laragon or any bundled development tool.\nAlthough you shouldn't need too much of Docker knowledge to work on your NumberNine project, it may come handy when\ntroubleshooting. See below some command examples that should get you started quickly.</p>\n<p>This is the list of the installed services.</p>\n<h2 id=\"php\"><a href=\"#php\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>PHP</h2>\n<p>The PHP container is loaded with some useful extensions and development tools.</p>\n<ul>\n<li>PHP 7.4</li>\n<li>APCu</li>\n<li>Xdebug 3</li>\n<li>Composer 2</li>\n<li>GNU Make</li>\n<li>OPcache</li>\n<li>Cachetool (clear OPcache and ACPu from CLI)</li>\n<li>Blackfire probe</li>\n</ul>\n<p>Connect to the container using this command:</p>\n<pre class=\"language-text\"><code class=\"language-text\">docker-compose exec php bash</code></pre>\n<p>You'll see a bash prompt inside which you can run Symfony or Cachetool commands. Type <code>exit</code> to return to your terminal session.</p>\n<p>Alternatively, if you just want to run a single command, use this syntax:</p>\n<pre class=\"language-text\"><code class=\"language-text\">docker-compose exec php [here the Linux command you want to run]</code></pre>\n<p>For example:</p>\n<pre class=\"language-text\"><code class=\"language-text\">docker-compose exec php bin/console list\ndocker-compose exec php composer update\ndocker-compose exec php cachetool opcache:status</code></pre>\n<h2 id=\"nginx\"><a href=\"#nginx\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Nginx</h2>\n<p>Nginx is running with a SSL connection on localhost.\nA self-signed certificate is created during installation.</p>\n<h2 id=\"mysql\"><a href=\"#mysql\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>MySQL</h2>\n<p>NumberNine is specifically designed to run on MySQL, taking advantage of the JSON features.\nAlthough it should work fine on MariaDB or SQLite, it hasn't been tested and it's not recommended to change.</p>\n<p>MySQL is running in version 8.</p>\n<h2 id=\"blackfire\"><a href=\"#blackfire\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Blackfire</h2>\n<p>To make Blackfire work, you need to register an account on <a href=\"https://blackfire.io\" target=\"_blank\" rel=\"noopener noreferrer\">blackfire.io</a>.</p>\n<p>Once your account is created, create 4 environment variables in your <code>~/.bashrc</code> file with the\nvalues found in <a href=\"https://blackfire.io/my/settings/credentials\" target=\"_blank\" rel=\"noopener noreferrer\">your account settings</a>.</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\">BLACKFIRE_CLIENT_ID</span><span class=\"token operator\">=</span>yourkey\n<span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\">BLACKFIRE_CLIENT_TOKEN</span><span class=\"token operator\">=</span>yourkey\n<span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\">BLACKFIRE_SERVER_ID</span><span class=\"token operator\">=</span>yourkey\n<span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\">BLACKFIRE_SERVER_TOKEN</span><span class=\"token operator\">=</span>yourkey</code></pre>\n<p>Modify <code>docker-compose.yml</code> to add this key under <code>blackfire</code> service (leave the tildes):</p>\n<pre class=\"language-yaml\"><code class=\"language-yaml\">    <span class=\"token key atrule\">blackfire</span><span class=\"token punctuation\">:</span>\n        <span class=\"token comment\"># ...</span>\n        <span class=\"token key atrule\">environment</span><span class=\"token punctuation\">:</span>\n            <span class=\"token key atrule\">BLACKFIRE_CLIENT_ID</span><span class=\"token punctuation\">:</span> <span class=\"token null important\">~</span>\n            <span class=\"token key atrule\">BLACKFIRE_CLIENT_TOKEN</span><span class=\"token punctuation\">:</span> <span class=\"token null important\">~</span>\n            <span class=\"token key atrule\">BLACKFIRE_SERVER_ID</span><span class=\"token punctuation\">:</span> <span class=\"token null important\">~</span>\n            <span class=\"token key atrule\">BLACKFIRE_SERVER_TOKEN</span><span class=\"token punctuation\">:</span> <span class=\"token null important\">~</span></code></pre>\n<p>Finally, <a href=\"https://blackfire.io/docs/profiling-cookbooks/profiling-http-via-browser\" target=\"_blank\" rel=\"noopener noreferrer\">install the Chrome or Firefox extension</a>\nand you're ready to profile your website.</p>\n<h2 id=\"redis\"><a href=\"#redis\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Redis</h2>\n<p>Symfony sessions and app cache is stored in a Redis database. If you need to clear the Redis cache, run this command:</p>\n<pre class=\"language-text\"><code class=\"language-text\">docker-compose exec redis redis-cli flushall</code></pre>\n<h2 id=\"maildev\"><a href=\"#maildev\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Maildev</h2>\n<p>As a mail catcher, NumberNine is bundled with Maildev which is a joy to use.\nBy default, the mailbox interface will be running on port <a href=\"http://localhost:8010/\" target=\"_blank\" rel=\"noopener noreferrer\">http://localhost:8010/</a>\nunless you change the port in <code>docker-compose.yml</code>.</p>\n<p>Every mail sent by NumberNine will appear in your Maildev inbox.</p>\n","sidebar":"docs","next":"/docs/architecture/symfony/","prev":"/docs/first-steps/","headings":[{"depth":1,"value":"Docker services","anchor":"#docker-services"},{"depth":2,"value":"PHP","anchor":"#php"},{"depth":2,"value":"Nginx","anchor":"#nginx"},{"depth":2,"value":"MySQL","anchor":"#mysql"},{"depth":2,"value":"Blackfire","anchor":"#blackfire"},{"depth":2,"value":"Redis","anchor":"#redis"},{"depth":2,"value":"Maildev","anchor":"#maildev"}]},"allMarkdownPage":{"edges":[{"node":{"path":"/docs/howto/user-management/create-a-capability/","title":"Create a capability"}},{"node":{"path":"/docs/howto/theming/create-a-shortcode/","title":"Create a shortcode"}},{"node":{"path":"/docs/howto/theming/create-a-component/","title":"Create a component"}},{"node":{"path":"/docs/howto/content/create-a-content-type/","title":"Create a content type"}},{"node":{"path":"/docs/architecture/user-management/","title":"User management"}},{"node":{"path":"/docs/architecture/theming/","title":"Theming"}},{"node":{"path":"/docs/architecture/symfony/","title":"Symfony 5.1+"}},{"node":{"path":"/docs/architecture/content-types/","title":"Content types"}},{"node":{"path":"/docs/screenshots/","title":"Screenshots"}},{"node":{"path":"/docs/installation/","title":"Installation"}},{"node":{"path":"/docs/","title":"Introduction"}},{"node":{"path":"/docs/first-steps/","title":"First steps"}},{"node":{"path":"/docs/docker/","title":"Docker services"}}]}},"context":{}}
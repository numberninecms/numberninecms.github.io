{"hash":"0032a6e2265774968c93abc35e143e0c9e3f7478","data":{"markdownPage":{"id":"7358af94cc9e672b4665f38772a9f72d","title":"Create a component","description":"Create a component","path":"/docs/howto/theming/create-a-component/","timeToRead":1,"content":"<h1 id=\"create-a-component\"><a href=\"#create-a-component\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Create a component</h1>\n<p>To understand what are components, <a href=\"/docs/architecture/theming/#components\">read this section</a>.</p>\n<h2 id=\"configure-the-path-where-to-store-components\"><a href=\"#configure-the-path-where-to-store-components\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Configure the path where to store components</h2>\n<p>In your <code>config/packages/numbernine.yaml</code> file, configure the path where to store components.\nBy default it's <code>src/Component/</code>, if this path suits you then skip this step.</p>\n<pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">numbernine</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">components_path</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'src/My/Path/To/Components/'</span></code></pre>\n<h2 id=\"using-cli\"><a href=\"#using-cli\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Using CLI</h2>\n<p>Run this command in your terminal:</p>\n<pre class=\"language-text\"><code class=\"language-text\">docker-compose exec php bin/console numbernine:make:component</code></pre>\n<p>You'll be asked for a component name, enter the name you want.\nYou can create subfolders, for example <code>Post/PostAuthor</code>.</p>\n<h2 id=\"file-structure\"><a href=\"#file-structure\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>File structure</h2>\n<p>A new folder is created with two files:</p>\n<ul>\n<li>\n<p><code>YourComponent/YourComponent.php</code></p>\n<p>This is the controller of the component template.</p>\n</li>\n<li>\n<p><code>YourComponent/template.html.php</code></p>\n<p>This is the template.</p>\n</li>\n</ul>\n<h2 id=\"render-a-component-from-twig\"><a href=\"#render-a-component-from-twig\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Render a component from Twig</h2>\n<p>To render the component, use this Twig function:</p>\n<pre class=\"language-twig\"><code class=\"language-twig\"><span class=\"token tag\"><span class=\"token ld\"><span class=\"token punctuation\">{{</span></span> <span class=\"token property\">N9_component</span><span class=\"token punctuation\">(</span><span class=\"token string\"><span class=\"token punctuation\">'</span>YourComponent<span class=\"token punctuation\">'</span></span><span class=\"token punctuation\">)</span> <span class=\"token rd\"><span class=\"token punctuation\">}}</span></span></span></code></pre>\n<h2 id=\"inject-variables-in-a-component\"><a href=\"#inject-variables-in-a-component\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Inject variables in a component</h2>\n<p>You can inject some variables from the parent template into your component:</p>\n<pre class=\"language-twig\"><code class=\"language-twig\"><span class=\"token tag\"><span class=\"token ld\"><span class=\"token punctuation\">{{</span></span> <span class=\"token property\">N9_component</span><span class=\"token punctuation\">(</span><span class=\"token string\"><span class=\"token punctuation\">'</span>YourComponent<span class=\"token punctuation\">'</span></span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token property\">example</span><span class=\"token punctuation\">:</span> <span class=\"token string\"><span class=\"token punctuation\">'</span>string variable<span class=\"token punctuation\">'</span></span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token rd\"><span class=\"token punctuation\">}}</span></span></span></code></pre>\n<p>To catch it, your component need to implement the corresponding setter:</p>\n<pre class=\"language-php\"><code class=\"language-php\"><span class=\"token keyword\">final</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">YourComponent</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">ComponentInterface</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> string <span class=\"token variable\">$example</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">setExample</span><span class=\"token punctuation\">(</span>string <span class=\"token variable\">$example</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> void\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token this\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token property\">example</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$example</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<h2 id=\"expose-variables-to-the-components-template\"><a href=\"#expose-variables-to-the-components-template\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Expose variables to the component's template</h2>\n<p>Every component must implement <code>getTemplateParameters()</code> which returns an array of exposed\nvariables to the template.</p>\n<pre class=\"language-php\"><code class=\"language-php\"><span class=\"token keyword\">final</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">YourComponent</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">ComponentInterface</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ...</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">getTemplateParameters</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">array</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> \n            <span class=\"token single-quoted-string string\">'example'</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token this\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token property\">example</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>The Twig template can now use this variable:</p>\n<pre class=\"language-twig\"><code class=\"language-twig\"><span class=\"token other\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span>Displaying custom variable:</span> <span class=\"token tag\"><span class=\"token ld\"><span class=\"token punctuation\">{{</span></span> <span class=\"token property\">example</span> <span class=\"token rd\"><span class=\"token punctuation\">}}</span></span></span><span class=\"token other\">.<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span></span></code></pre>\n<h2 id=\"injecting-a-service-in-your-component\"><a href=\"#injecting-a-service-in-your-component\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Injecting a service in your component</h2>\n<p>Every component is a service. This means you can use dependency injection like with any other service.</p>\n<pre class=\"language-php\"><code class=\"language-php\"><span class=\"token keyword\">final</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">YourComponent</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">ComponentInterface</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">__construct</span><span class=\"token punctuation\">(</span>\n        EventDispatcherInterface <span class=\"token variable\">$eventDispatcher</span>\n    <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// ...</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n","sidebar":"docs","next":"","prev":"","headings":[{"depth":1,"value":"Create a component","anchor":"#create-a-component"},{"depth":2,"value":"Configure the path where to store components","anchor":"#configure-the-path-where-to-store-components"},{"depth":2,"value":"Using CLI","anchor":"#using-cli"},{"depth":2,"value":"File structure","anchor":"#file-structure"},{"depth":2,"value":"Render a component from Twig","anchor":"#render-a-component-from-twig"},{"depth":2,"value":"Inject variables in a component","anchor":"#inject-variables-in-a-component"},{"depth":2,"value":"Expose variables to the component's template","anchor":"#expose-variables-to-the-components-template"},{"depth":2,"value":"Injecting a service in your component","anchor":"#injecting-a-service-in-your-component"}]},"allMarkdownPage":{"edges":[{"node":{"path":"/docs/howto/theming/create-a-component/","title":"Create a component"}},{"node":{"path":"/docs/architecture/user-management/","title":"User management"}},{"node":{"path":"/docs/architecture/theming/","title":"Theming"}},{"node":{"path":"/docs/architecture/symfony/","title":"Symfony 5.1+"}},{"node":{"path":"/docs/screenshots/","title":"Screenshots"}},{"node":{"path":"/docs/installation/","title":"Installation"}},{"node":{"path":"/docs/","title":"Introduction"}},{"node":{"path":"/docs/first-steps/","title":"First steps"}},{"node":{"path":"/docs/docker/","title":"Docker services"}}]}},"context":{}}
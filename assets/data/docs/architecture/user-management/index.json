{"hash":"7725ed5887d644dbce687390eefcd402a136febf","data":{"markdownPage":{"id":"c755a9cb613b0e3c51ec137d065a236d","title":"User management","description":"User management","path":"/docs/architecture/user-management/","timeToRead":1,"content":"<h1 id=\"user-management\"><a href=\"#user-management\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>User management</h1>\n<h2 id=\"roles-and-capabilities\"><a href=\"#roles-and-capabilities\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Roles and capabilities</h2>\n<p>Roles in NumberNine are slightly different than they are in Symfony.</p>\n<p>Traditionally, Symfony defines user roles as simple strings like <code>ROLE_USER</code> or <code>ROLE_ADMIN</code>\nthat give very little flexibility on permissions.</p>\n<p>NumberNine comes with 6 built-in roles:</p>\n<ul>\n<li><code>Administrator</code></li>\n<li><code>Editor</code></li>\n<li><code>Author</code></li>\n<li><code>Contributor</code></li>\n<li><code>Subscriber</code></li>\n<li><code>Banned</code></li>\n</ul>\n<p>A set of permissions is assigned to each role, such as who can read a page, who can access admin,\nwho can edit a post, etc.</p>\n<p>In the admin panel under <code>Users > Roles</code>, you can assign or remove permissions to each role:</p>\n<a href=\"/screenshots/admin_users_roles.jpg\" target=\"_blank\" title=\"NumberNine Admin user roles\">\n  <img src=\"/screenshots/small/admin_users_roles.jpg\" alt=\"NumberNine Admin user roles\">\n</a>\n<br>\n<p>To create a new role, enter the name of the role you want to create and click the <code>+</code> button to create it.\nIt will appear in a new column, you can then assign the permissions you want.</p>\n<p>Only user created roles can be removed.</p>\n<h2 id=\"grant-access-to-a-page-using-permission\"><a href=\"#grant-access-to-a-page-using-permission\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Grant access to a page using permission</h2>\n<p>In your controller which extends <code>Symfony\\Bundle\\FrameworkBundle\\Controller\\AbstractController</code>,\nadd a line such as:</p>\n<pre class=\"language-php\"><code class=\"language-php\"><span class=\"token this\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">denyAccessUnlessGranted</span><span class=\"token punctuation\">(</span><span class=\"token scope\">Capabilities<span class=\"token punctuation\">::</span></span><span class=\"token constant\">READ</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$entity</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p><code>Capabilities</code> class groups all built-in capabilities.</p>\n<h2 id=\"add-a-custom-capability\"><a href=\"#add-a-custom-capability\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Add a custom capability</h2>\n<p>Create a class in <code>src/EventSubscriber/CapabilitiesListEventSubscriber.php</code> file.</p>\n<pre class=\"language-php\"><code class=\"language-php\"><span class=\"token keyword\">namespace</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>EventSubscriber</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">use</span> <span class=\"token package\">NumberNine<span class=\"token punctuation\">\\</span>Event<span class=\"token punctuation\">\\</span>CapabilitiesListEvent</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token package\">Symfony<span class=\"token punctuation\">\\</span>Component<span class=\"token punctuation\">\\</span>EventDispatcher<span class=\"token punctuation\">\\</span>EventSubscriberInterface</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">final</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">CapabilitiesListEventSubscriber</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">EventSubscriberInterface</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">function</span> <span class=\"token function\">getSubscribedEvents</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">array</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>\n            <span class=\"token scope\">CapabilitiesListEvent<span class=\"token punctuation\">::</span></span><span class=\"token keyword\">class</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token single-quoted-string string\">'addCapabilities'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">addCapabilities</span><span class=\"token punctuation\">(</span>CapabilitiesListEvent <span class=\"token variable\">$event</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> void\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token variable\">$event</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">addCapability</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'my_first_custom_capability'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token variable\">$event</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">addCapability</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'another_custom_capability'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Assign it to the roles you want. Then in your controller:</p>\n<pre class=\"language-php\"><code class=\"language-php\"><span class=\"token this\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">denyAccessUnlessGranted</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'my_first_custom_capability'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n","sidebar":"docs","next":"/docs/architecture/theming/","prev":"/docs/architecture/symfony/","headings":[{"depth":1,"value":"User management","anchor":"#user-management"},{"depth":2,"value":"Roles and capabilities","anchor":"#roles-and-capabilities"},{"depth":2,"value":"Grant access to a page using permission","anchor":"#grant-access-to-a-page-using-permission"},{"depth":2,"value":"Add a custom capability","anchor":"#add-a-custom-capability"}]},"allMarkdownPage":{"edges":[{"node":{"path":"/docs/howto/theming/create-a-component/","title":"Create a component"}},{"node":{"path":"/docs/architecture/user-management/","title":"User management"}},{"node":{"path":"/docs/architecture/theming/","title":"Theming"}},{"node":{"path":"/docs/architecture/symfony/","title":"Symfony 5.1+"}},{"node":{"path":"/docs/screenshots/","title":"Screenshots"}},{"node":{"path":"/docs/first-steps/","title":"First steps"}},{"node":{"path":"/docs/installation/","title":"Installation"}},{"node":{"path":"/docs/","title":"Introduction"}},{"node":{"path":"/docs/docker/","title":"Docker services"}}]}},"context":{}}
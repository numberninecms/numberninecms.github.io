{"hash":"bea46dfa33e76edae069920c52134defc4a6f384","data":{"markdownPage":{"id":"89e169571802d095a842a146d9e8343e","title":"Theming","description":"Theming","path":"/docs/architecture/theming/","timeToRead":3,"content":"<h1 id=\"theming\"><a href=\"#theming\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Theming</h1>\n<p>A NumberNine theme is a Symfony bundle that handles rendering of the website.\nUnless you choose another theme or build your own, the default theme is <code>ChapterOne</code>.</p>\n<p>Every template is overridable in your own <code>/templates/theme/</code> directory.</p>\n<h2 id=\"chapterone\"><a href=\"#chapterone\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>ChapterOne</h2>\n<p><em><strong>Note: ChapterOne is still under active development. Features below may not be all implemented yet.</strong></em></p>\n<p>ChapterOne is a full featured theme for NumberNine that features the following:</p>\n<ul>\n<li>TailwindCSS</li>\n<li>Responsive design</li>\n<li>Hundreds of pre-designed blocks editable in the page builder</li>\n<li>Configurable base colors</li>\n<li>Several page templates (full width, no header, left sidebar, right sidebar, etc.)</li>\n</ul>\n<h2 id=\"page-templates\"><a href=\"#page-templates\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Page templates</h2>\n<p>Page templates are layouts for your index pages or entity pages.</p>\n<p>An entity page is a page that will render a specific entity, for example a blog post, a page,\na product, a portfolio gallery, an architecture project.</p>\n<p>An entity page can have many templates, based on its <a href=\"\">content type</a>.</p>\n<p>Here's how NumberNine knows which template to choose, sorted by highest priority to lowest.<br>\nNote that your <code>/templates/theme/</code> directory has <strong>greater priority</strong> than theme's templates. This way\nyou can override any theme's template.</p>\n<ul>\n<li>\n<p><code>content_type_name/single.custom_template.html.twig</code></p>\n<p>You can assign a custom template to your page in administration panel. In this case, this\ntemplate will have the highest priority above all others.</p>\n</li>\n<li>\n<p><code>content_type_name/single_slug-of-your-entity.html.twig</code></p>\n<p>The slug of an entity is created from its title.</p>\n</li>\n<li>\n<p><code>content_type_name/single_214.html.twig</code></p>\n<p>This template will be selected if your entity ID is 214.</p>\n</li>\n<li>\n<p><code>content/single.html.twig</code></p>\n<p>A generic template that all content types fallback to.</p>\n</li>\n</ul>\n<p>In the above examples, <code>content_type_name</code> can be <code>post</code>, <code>page</code>, <code>product</code> or any other content type that you create.</p>\n<h2 id=\"components\"><a href=\"#components\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Components</h2>\n<p>A component is a <strong>micro-controller</strong> to which you'll <strong>delegate the rendering of a region of your page</strong>.\nIt's similar to including another template in your Twig template, but with <strong>PHP logic</strong> in between.</p>\n<p>This feature is aimed to help developers to write better code by splitting what could be a huge controller into\nmany little controllers who handle one concern at a time.</p>\n<p>You don't have to use components if you don't want to.</p>\n<p><a href=\"/docs/howto/theming/create-a-component/\">Learn how to create and use a component...</a></p>\n<h2 id=\"shortcodes\"><a href=\"#shortcodes\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Shortcodes</h2>\n<p>Also known as BBcodes, shortcodes are widely used in CMS software like WordPress or Drupal.</p>\n<p>While the purpose of a component is purely developer-oriented, the shortcode is purely user-oriented.\nThey are meant to give the opportunity to the end user, who doesn't know how to code, to customize\nits website pages with dynamic components represented by a text string.</p>\n<p>As an example, a user could type the following text in the page editor:</p>\n<pre class=\"language-text\"><code class=\"language-text\">What a great day today in Paris.\n[weather location=&quot;Paris&quot;]</code></pre>\n<p>The part <code>[weather location=\"Paris\"]</code> is a shortcode, named <code>weather</code> with one parameter <code>location</code> whose\nvalue is <code>Paris</code>. When the page renders, shortcodes are interpreted and obviously not presented to the visitors\nlike this, but rendered with a dedicated template.</p>\n<p>Now what's interesting in NumberNine is that shortcodes are, just like components, <strong>isolated micro-controllers\nrunning as services</strong>.</p>\n<p>What more? Shortcodes are also meant to be page builder elements. Any shortcode you create can be easily\nintegrated to the page builder without having to recompile admin source.</p>\n<p><a href=\"/docs/howto/theming/create-a-shortcode/\">Learn how to create and use a shortcode...</a></p>\n<h2 id=\"areas\"><a href=\"#areas\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Areas</h2>\n<p>A theme may contain areas. Areas are common to several pages and generally used in templates. They are\neditable through the page builder and are rendered as text in the database.</p>\n<p>A typical use of areas is the site header, the footer, a blog sidebar, etc.</p>\n<p>To make them editable and dynamic, they accept shortcodes. As an example, a blog sidebar may look like\nthis:</p>\n<pre class=\"language-text\"><code class=\"language-text\">[categories title=&quot;Categories&quot;]\n[recent_posts title=&quot;Recent Posts&quot; count=&quot;10&quot;]</code></pre>\n<p>Obviously, the end-user won't have to write its sidebar this way, and will directly use the page\nbuilder like this:</p>\n<img src=\"/screenshots/blog_sidebar_edition.gif\" alt=\"NumberNine Blog Sidebar Edition Demo\">\n","sidebar":"docs","next":"/docs/architecture/content-types/","prev":"/docs/architecture/user-management/","headings":[{"depth":1,"value":"Theming","anchor":"#theming"},{"depth":2,"value":"ChapterOne","anchor":"#chapterone"},{"depth":2,"value":"Page templates","anchor":"#page-templates"},{"depth":2,"value":"Components","anchor":"#components"},{"depth":2,"value":"Shortcodes","anchor":"#shortcodes"},{"depth":2,"value":"Areas","anchor":"#areas"}]},"allMarkdownPage":{"edges":[{"node":{"path":"/docs/howto/user-management/create-a-capability/","title":"Create a capability"}},{"node":{"path":"/docs/howto/theming/create-a-shortcode/","title":"Create a shortcode"}},{"node":{"path":"/docs/howto/theming/create-a-component/","title":"Create a component"}},{"node":{"path":"/docs/howto/content/create-a-content-type/","title":"Create a content type"}},{"node":{"path":"/docs/reference/events/","title":"Events"}},{"node":{"path":"/docs/architecture/user-management/","title":"User management"}},{"node":{"path":"/docs/architecture/theming/","title":"Theming"}},{"node":{"path":"/docs/architecture/symfony/","title":"Symfony 5.1+"}},{"node":{"path":"/docs/architecture/content-types/","title":"Content types"}},{"node":{"path":"/docs/screenshots/","title":"Screenshots"}},{"node":{"path":"/docs/installation/","title":"Installation"}},{"node":{"path":"/docs/","title":"Introduction"}},{"node":{"path":"/docs/first-steps/","title":"First steps"}},{"node":{"path":"/docs/docker/","title":"Docker services"}}]}},"context":{}}
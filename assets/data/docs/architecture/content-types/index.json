{"hash":"c2c7a233e398af6701af9cfa56e8593f67ba5cd7","data":{"markdownPage":{"id":"1160a010f4a9e67ce263b62efc06b669","title":"Content types","description":"Content types","path":"/docs/architecture/content-types/","timeToRead":2,"content":"<h1 id=\"content-types\"><a href=\"#content-types\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Content types</h1>\n<h2 id=\"introduction\"><a href=\"#introduction\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Introduction</h2>\n<p>Most CMS give the opportunity to the developer to create content types as a way to extend the\nediting possibilities.</p>\n<p>A <strong>content entity</strong> is a Doctrine entity class, to which is assigned an URL, and therefore a template.</p>\n<p>A <strong>content type</strong> is describing the kind of template and admin interface that will be used. It's not\nnecessarily a separate entity class.</p>\n<p>As an example, <strong><code>page</code></strong> and <strong><code>post</code></strong> are two <strong>content types</strong>, but both correspond to the same\n<code>NumberNine\\Entity\\Post</code> entity. Their small differences don't require to add more columns in the database\nto handle specific use cases. Therefore they are <strong>the same content entity</strong>.</p>\n<h2 id=\"architecture\"><a href=\"#architecture\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Architecture</h2>\n<p>Unlike traditional CMS software, <strong>NumberNine isn't built on a <a href=\"https://en.wikipedia.org/wiki/Entity%E2%80%93attribute%E2%80%93value_model\" target=\"_blank\" rel=\"noopener noreferrer\">EAV architecture</a></strong>.\nWhile EAV is great for extensibility, its biggest downside is that you'll quickly grow a huge amount of\ndatabase requests if not handled correctly.</p>\n<p>Instead, NumberNine uses a <strong>combination of relational model and JSON fields</strong>, thanks to MySQL new features.\nThis allows to store extra data in any particular entity while keeping the database requests to a minimum\nlevel, and a <strong>high performance</strong> output. Also, this <strong>greatly simplifies the querying process</strong> using Doctrine.</p>\n<p>All content entities inherit from <code>NumberNine\\Entity\\ContentEntity</code>.</p>\n<h2 id=\"built-in-content-types\"><a href=\"#built-in-content-types\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Built-in content types</h2>\n<p>Let's dive into the details of built-in content types and how to create new ones.</p>\n<p>NumberNine comes with several built-in content types:</p>\n<ul>\n<li><a href=\"#pages\">Pages</a></li>\n<li><a href=\"#posts\">Posts</a></li>\n<li><a href=\"#blocks\">Blocks</a></li>\n<li><a href=\"#media-files\">Media files</a></li>\n</ul>\n<h3 id=\"pages\"><a href=\"#pages\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Pages</h3>\n<p>The content type <code>page</code> is used for the pages that are not part of any timeline. For instance, most\nwebsites will have <code>About us</code>, <code>FAQ</code>, <code>Contact</code>, <code>Legal</code>, <code>Privacy</code>, etc. These are pages.</p>\n<p>The default template for page is full width, so doesn't have a sidebar.</p>\n<p>It doesn't make sense to have an index page listing all existing pages.</p>\n<p>An object with <code>page</code> content type is based on <code>NumberNine\\Entity\\Post</code> entity.</p>\n<a href=\"/screenshots/frontend_single_page.jpg\" target=\"_blank\" title=\"NumberNine Frontend single page\">\n  View an example of a page...\n</a>\n<h3 id=\"posts\"><a href=\"#posts\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Posts</h3>\n<p>Unlike <code>page</code>, the content type <code>post</code> is a typical blogging type. It represents a post which is part\nof a feed. By default, posts are featured in the blog, which is a paginated view of posts archives.</p>\n<p>An object with <code>post</code> content type is based on <code>NumberNine\\Entity\\Post</code> entity.</p>\n<a href=\"/screenshots/frontend_single_post.jpg\" target=\"_blank\" title=\"NumberNine Frontend single post\">\n  View an example of a post...\n</a>\n<h3 id=\"blocks\"><a href=\"#blocks\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Blocks</h3>\n<p>Blocks are pages without template. They're not meant to be accessed on their own, but instead they\ncan be included by the user in any other content, like a page or a post, using a shortcode.</p>\n<p>This is very useful when pages share a portion of text, so it can be edited only once.</p>\n<p>An object with <code>block</code> content type is based on <code>NumberNine\\Entity\\Post</code> entity.</p>\n<h3 id=\"media-files\"><a href=\"#media-files\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Media files</h3>\n<p>All data uploaded in the media library is transformed into an object with <code>media_file</code> content type.</p>\n<p>An object with <code>media_file</code> content type is based on <code>NumberNine\\Entity\\MediaFile</code> entity, which\nstores additional columns like the path of the file, the different sizes of the generated thumbnails,\nEXIF data, etc.</p>\n<h2 id=\"taxonomies\"><a href=\"#taxonomies\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Taxonomies</h2>\n<p>To each content type, you can assign one or many taxonomies.</p>\n<p><a href=\"\">Learn more about taxonomies...</a></p>\n<h2 id=\"in-the-administration-panel\"><a href=\"#in-the-administration-panel\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>In the administration panel</h2>\n<p>You'll access these content types on the left menu of the administration panel. Media files are handled differently\ninside the media library.</p>\n<a href=\"/screenshots/admin_contententity_index.jpg\" target=\"_blank\" title=\"NumberNine Admin posts list\">\n  <img src=\"/screenshots/small/admin_contententity_index.jpg\" alt=\"NumberNine Admin posts list\">\n</a>\n<h2 id=\"add-more-content-types\"><a href=\"#add-more-content-types\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Add more content types</h2>\n<p><a href=\"/docs/howto/content/create-a-content-type/\">Learn how to create and use custom content types...</a></p>\n","sidebar":"docs","next":"/docs/howto/theming/create-a-component/","prev":"/docs/architecture/theming/","headings":[{"depth":1,"value":"Content types","anchor":"#content-types"},{"depth":2,"value":"Introduction","anchor":"#introduction"},{"depth":2,"value":"Architecture","anchor":"#architecture"},{"depth":2,"value":"Built-in content types","anchor":"#built-in-content-types"},{"depth":3,"value":"Pages","anchor":"#pages"},{"depth":3,"value":"Posts","anchor":"#posts"},{"depth":3,"value":"Blocks","anchor":"#blocks"},{"depth":3,"value":"Media files","anchor":"#media-files"},{"depth":2,"value":"Taxonomies","anchor":"#taxonomies"},{"depth":2,"value":"In the administration panel","anchor":"#in-the-administration-panel"},{"depth":2,"value":"Add more content types","anchor":"#add-more-content-types"}]},"allMarkdownPage":{"edges":[{"node":{"path":"/docs/howto/user-management/create-a-capability/","title":"Create a capability"}},{"node":{"path":"/docs/howto/theming/create-a-shortcode/","title":"Create a shortcode"}},{"node":{"path":"/docs/howto/theming/create-a-component/","title":"Create a component"}},{"node":{"path":"/docs/howto/content/create-a-content-type/","title":"Create a content type"}},{"node":{"path":"/docs/reference/events/","title":"Events"}},{"node":{"path":"/docs/architecture/user-management/","title":"User management"}},{"node":{"path":"/docs/architecture/theming/","title":"Theming"}},{"node":{"path":"/docs/architecture/symfony/","title":"Symfony 5.1+"}},{"node":{"path":"/docs/architecture/content-types/","title":"Content types"}},{"node":{"path":"/docs/screenshots/","title":"Screenshots"}},{"node":{"path":"/docs/installation/","title":"Installation"}},{"node":{"path":"/docs/","title":"Introduction"}},{"node":{"path":"/docs/first-steps/","title":"First steps"}},{"node":{"path":"/docs/docker/","title":"Docker services"}}]}},"context":{}}
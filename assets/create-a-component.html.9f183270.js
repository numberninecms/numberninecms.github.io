import{_ as e,r as t,o as p,c as o,a as s,b as c,w as l,F as i,d as n,e as r}from"./app.c874ede5.js";const u={},m=s("h1",{id:"create-a-component",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#create-a-component","aria-hidden":"true"},"#"),n(" Create a component")],-1),d=n("To understand what are components, "),k=n("read this section"),b=n("."),h=r(`<h2 id="configuration" tabindex="-1"><a class="header-anchor" href="#configuration" aria-hidden="true">#</a> Configuration</h2><p>In your <code>config/packages/numbernine.yaml</code> file, configure the path where to store components. By default it&#39;s <code>src/Component/</code>, if this path suits you then skip this step.</p><div class="language-yaml ext-yml line-numbers-mode"><pre class="language-yaml"><code><span class="token key atrule">numbernine</span><span class="token punctuation">:</span>
    <span class="token key atrule">components_path</span><span class="token punctuation">:</span> <span class="token string">&#39;src/My/Path/To/Components/&#39;</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h2 id="using-cli" tabindex="-1"><a class="header-anchor" href="#using-cli" aria-hidden="true">#</a> Using CLI</h2><p>Run this command in your terminal:</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>docker compose exec php bin/console numbernine:make:component
</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>You&#39;ll be asked for a component name, enter the name you want. You can create subfolders, for example <code>Post/PostAuthor</code>.</p><h2 id="file-structure" tabindex="-1"><a class="header-anchor" href="#file-structure" aria-hidden="true">#</a> File structure</h2><p>A new folder is created with two files:</p><ul><li><p><code>MyComponent/MyComponent.php</code></p><p>This is the controller of the component template.</p></li><li><p><code>MyComponent/template.html.php</code></p><p>This is the template.</p></li></ul><h2 id="render-a-component-from-twig" tabindex="-1"><a class="header-anchor" href="#render-a-component-from-twig" aria-hidden="true">#</a> Render a component from Twig</h2><p>To render the component, use this Twig function:</p><div class="language-twig ext-twig line-numbers-mode"><pre class="language-twig"><code><span class="token twig language-twig"><span class="token delimiter punctuation">{{</span> N9_component<span class="token punctuation">(</span><span class="token string"><span class="token punctuation">&#39;</span>MyComponent<span class="token punctuation">&#39;</span></span><span class="token punctuation">)</span> <span class="token delimiter punctuation">}}</span></span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h2 id="inject-variables-in-a-component" tabindex="-1"><a class="header-anchor" href="#inject-variables-in-a-component" aria-hidden="true">#</a> Inject variables in a component</h2><p>You can inject some variables from the parent template into your component:</p><div class="language-twig ext-twig line-numbers-mode"><pre class="language-twig"><code><span class="token twig language-twig"><span class="token delimiter punctuation">{{</span> N9_component<span class="token punctuation">(</span><span class="token string"><span class="token punctuation">&#39;</span>MyComponent<span class="token punctuation">&#39;</span></span><span class="token punctuation">,</span> <span class="token punctuation">{</span>example<span class="token punctuation">:</span> <span class="token string"><span class="token punctuation">&#39;</span>string variable<span class="token punctuation">&#39;</span></span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token delimiter punctuation">}}</span></span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>To catch it, your component need to implement the corresponding setter:</p><div class="language-php ext-php line-numbers-mode"><pre class="language-php"><code><span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name-definition class-name">MyComponent</span> <span class="token keyword">implements</span> <span class="token class-name">ComponentInterface</span>
<span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword type-declaration">string</span> <span class="token variable">$example</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">setExample</span><span class="token punctuation">(</span><span class="token keyword type-hint">string</span> <span class="token variable">$example</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">void</span>
    <span class="token punctuation">{</span>
        <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">example</span> <span class="token operator">=</span> <span class="token variable">$example</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// ...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h2 id="expose-variables-to-the-component-s-template" tabindex="-1"><a class="header-anchor" href="#expose-variables-to-the-component-s-template" aria-hidden="true">#</a> Expose variables to the component&#39;s template</h2><p>Every component must implement <code>getTemplateParameters()</code> which returns an array of exposed variables to the template.</p><div class="language-php ext-php line-numbers-mode"><pre class="language-php"><code><span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name-definition class-name">MyComponent</span> <span class="token keyword">implements</span> <span class="token class-name">ComponentInterface</span>
<span class="token punctuation">{</span>
    <span class="token comment">// ...</span>

    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">getTemplateParameters</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">array</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token punctuation">[</span>
            <span class="token string single-quoted-string">&#39;example&#39;</span> <span class="token operator">=&gt;</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">example</span><span class="token punctuation">,</span>
        <span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>The Twig template can now use this variable:</p><div class="language-twig ext-twig line-numbers-mode"><pre class="language-twig"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>Displaying custom variable: <span class="token twig language-twig"><span class="token delimiter punctuation">{{</span> example <span class="token delimiter punctuation">}}</span></span>.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h2 id="injecting-a-service-in-your-component" tabindex="-1"><a class="header-anchor" href="#injecting-a-service-in-your-component" aria-hidden="true">#</a> Injecting a service in your component</h2><p>Every component is a service. This means you can use dependency injection like with any other service.</p><div class="language-php ext-php line-numbers-mode"><pre class="language-php"><code><span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name-definition class-name">MyComponent</span> <span class="token keyword">implements</span> <span class="token class-name">ComponentInterface</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span>
        <span class="token class-name type-declaration">EventDispatcherInterface</span> <span class="token variable">$eventDispatcher</span>
    <span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// ...</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div>`,26);function g(v,y){const a=t("RouterLink");return p(),o(i,null,[m,s("p",null,[d,c(a,{to:"/developers/architecture/theming.html#components"},{default:l(()=>[k]),_:1}),b]),h],64)}var w=e(u,[["render",g]]);export{w as default};
